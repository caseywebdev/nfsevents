#!/usr/bin/env node

var chokidar = require('chokidar');
var moment = require('moment');
var path = require('path');
var os = require('os');
var spawn = require('child_process').spawn;
var zmq = require('zmq');

var sock;
var log = console.log.bind(console);
var url = 'tcp://0.0.0.0:12321';

var handleStderr = function (data) { console.error(data.toString()); };

var FORMAT = 'YYYYMMDDhhmm.ss';

var cache = {};

if (os.platform() === 'darwin') {

  // Host machine (OS X)
  sock = zmq.socket('pub');
  var watchPath = path.resolve();
  sock.connect(url);

  var sendMessage = function (path, stat) {
    var mtime = moment(stat.mtime).format(FORMAT);
    if (cache[path] && cache[path] === mtime) return;
    cache[path] = mtime;
    log(mtime + ' ' + path);
    sock.send(['change', JSON.stringify({path: path, mtime: mtime})]);
  };

  log('Watching ' + watchPath + ' and publishing changes on ' + url);
  chokidar
    .watch(watchPath, {
      alwaysStat: true,
      ignoreInitial: true,
      persistent: true
    })
    .on('add', sendMessage)
    .on('change', sendMessage);
} else {

  // Guest machine (Linux)
  sock = zmq.socket('sub');
  sock.bindSync(url);
  sock.subscribe('change');

  log('Listening for published changes on ' + url);
  sock.on('message', function (topic, message) {
    var data = JSON.parse(message.toString());
    log(data.mtime + ' ' + data.path);
    var child = spawn('touch', ['-mct', data.mtime, data.path]);
    child.stderr.on('data', handleStderr);
  });
}
