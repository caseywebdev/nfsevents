#!/usr/bin/env node

var chokidar = require('chokidar');
var moment = require('moment');
var fs = require('fs');
var path = require('path');
var os = require('os');
var spawn = require('child_process').spawn;
var zmq = require('zmq');

var FORMAT = 'YYYYMMDDhhmm.ss';
var URL = 'tcp://0.0.0.0:12321';
var PID_PATH = '.nfsevents_pid';
var CACHE = {};

var LOG = console.log.bind(console);

var HANDLE_STDERR = function (data) { console.error(data.toString()); };

var sock;
if (os.platform() === 'darwin') {

  // Kill the existing nfsevents watcher for this directory if it exists.
  try { process.kill(parseInt(fs.readFileSync(PID_PATH))); } catch (er) {}
  fs.writeFileSync(PID_PATH, process.pid);

  // Host machine (OS X)
  sock = zmq.socket('pub');
  var watchPath = path.resolve();
  sock.connect(URL);

  var sendMessage = function (path, stat) {
    var mtime = moment(stat.mtime).format(FORMAT);
    if (CACHE[path] && CACHE[path] === mtime) return;
    CACHE[path] = mtime;
    LOG(mtime + ' ' + path);
    sock.send(['change', JSON.stringify({path: path, mtime: mtime})]);
  };

  LOG('Watching ' + watchPath + ' and publishing changes to ' + URL);
  chokidar
    .watch(watchPath, {
      alwaysStat: true,
      ignoreInitial: true,
      persistent: true
    })
    .on('add', sendMessage)
    .on('change', sendMessage);
} else {

  // Guest machine (Linux)
  sock = zmq.socket('sub');
  sock.bindSync(URL);
  sock.subscribe('change');

  LOG('Listening for published changes on ' + URL);
  sock.on('message', function (topic, message) {
    var data = JSON.parse(message.toString());
    LOG(data.mtime + ' ' + data.path);
    var child = spawn('touch', ['-mct', data.mtime, data.path]);
    child.stderr.on('data', HANDLE_STDERR)
  });
}
